# This pipeline uses container images to run each stage of the
# pipeline. You can create your own images or use some existing
# images that GCP provides and maintain. For mor information check
# https://cloud.google.com/build/docs/cloud-builders
# https://github.com/GoogleCloudPlatform/cloud-builders
# https://github.com/GoogleCloudPlatform/cloud-builders-community
steps:
  - name: gcr.io/cloud-builders/docker
    id: Build Application
    script: |
      export TIMESTAMP=`date -u +%Y%m%d%H%M%S`
      echo "BUILD_TAG ${DOCKER_USERNAME}/jpetstoreweb:${BUILD_TAG}-${TIMESTAMP}"
      docker build -t "${DOCKER_USERNAME}/jpetstoreweb:${BUILD_TAG}-${TIMESTAMP}" -t "${DOCKER_USERNAME}/jpetstoreweb:latest" ./jpetstore
      docker build -t "${DOCKER_USERNAME}/jpetstoredb:${BUILD_TAG}-${TIMESTAMP}" -t "${DOCKER_USERNAME}/jpetstoredb:latest" .
      docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      docker push "${DOCKER_USERNAME}/jpetstoreweb:${BUILD_TAG}-${TIMESTAMP}"
      docker push "${DOCKER_USERNAME}/jpetstoreweb:latest"
      docker push "${DOCKER_USERNAME}/jpetstoredb:${BUILD_TAG}-${TIMESTAMP}"
      docker push "${DOCKER_USERNAME}/jpetstoredb:latest"
    env:
      - 'BUILD_TAG=${BUILD_ID}-${BRANCH_NAME}-${SHORT_SHA}'
      - 'JPETSTOREWEB=${_DOCKER_USERNAME}/jpetstoreweb'
      - 'BUILD=$BUILD_ID'
      - 'PROJECT_ID=$PROJECT_ID'
      - 'PROJECT_NUMBER=$PROJECT_NUMBER'
      - 'REV=$REVISION_ID'
      - 'SHORT_SHA=$SHORT_SHA'
    secretEnv: ['DOCKER_USERNAME', 'DOCKER_PASSWORD']
  - name: openjdk:19-jdk-alpine3.16
    id: Test application
    script: |
      java --version
      apk update && apk add apache-ant
      cd jpetstore
      ls
      ant runtest
      cd ..
      cp -r ./jpetstore/build/reports/TEST-*.xml /workspace/
  # This step is needed for use helm
  - name: gcr.io/cloud-builders/gcloud
    id: Creating helm image within GCP Container Registry
    script: |
      gcloud --version
      git clone https://github.com/GoogleCloudPlatform/cloud-builders-community
      cd cloud-builders-community/helm
      gcloud builds submit --config cloudbuild.yaml .
  - name: gcr.io/cloud-builders/kubectl
    id: Configure cluster
    args: ['cluster-info']
    env:
      - 'CLOUDSDK_COMPUTE_REGION=$_CUSTOM_REGION'
      - 'CLOUDSDK_CONTAINER_CLUSTER=$_CUSTOM_CLUSTER'
      - 'KUBECONFIG=/workspace/.kube/config'
  # First create the helm image in your GCP account and upload it
  # to the Container Registry with Google CLI. For instance:
  # $ git clone https://github.com/GoogleCloudPlatform/cloud-builders-community
  # $ cd cloud-builders-community/helm
  # $ gcloud builds submit --config cloudbuild.yaml .
  - name: gcr.io/${PROJECT_ID}/helm
    id: Deploy application
    script: |
      helm package --destination ./modernpets ./helm/modernpets
      helm upgrade --install --wait --set image.repository=${DOCKER_USERNAME} --set image.tag=latest --set mysql.url=${MYSQL_URL} --set mysql.username=${MYSQL_USERNAME} --set mysql.password=${MYSQL_PASSWORD} --set isDBAAS=True --set isLB=True --set httpHost=jeptstorehost.gcp --namespace=${NAMESPACE} --create-namespace ${NAMESPACE} ./modernpets/modernpets-0.1.5.tgz
    env:
      - 'KUBECONFIG=/workspace/.kube/config'
      - 'TILLERLESS=true'
      - 'NAMESPACE=$_NAMESPACE'
    secretEnv:
      ['DOCKER_USERNAME', 'MYSQL_URL', 'MYSQL_USERNAME', 'MYSQL_PASSWORD']
options:
  dynamic_substitutions: true
# These are variables that you can define before the execution of
# the pipeline. The syntax to declare these variables are found here:
# https://cloud.google.com/build/docs/configuring-builds/substitute-variable-values
substitutions:
  _CUSTOM_REGION: us-central1-a
  _CUSTOM_CLUSTER: petstore-gke-cluster
  _NAMESPACE: jpetstore
# These secrets are created inside GCP Secret Manager. You can get them and
# use them in any stage of the pipeline, but cannot be used with other variables
# or substitution variable to concatenate a new string as an env var, i.e, 'IMAGE_TAG=${MYSECRET}-tag'
availableSecrets:
  secretManager:
    - versionName: 'projects/${PROJECT_ID}/secrets/DOCKER_USERNAME/versions/latest'
      env: 'DOCKER_USERNAME'
    - versionName: 'projects/${PROJECT_ID}/secrets/DOCKER_PASSWORD/versions/latest'
      env: 'DOCKER_PASSWORD'
    - versionName: 'projects/${PROJECT_ID}/secrets/MYSQL_URL/versions/latest'
      env: 'MYSQL_URL'
    - versionName: 'projects/${PROJECT_ID}/secrets/MYSQL_USERNAME/versions/latest'
      env: 'MYSQL_USERNAME'
    - versionName: 'projects/${PROJECT_ID}/secrets/MYSQL_PASSWORD/versions/latest'
      env: 'MYSQL_PASSWORD'
